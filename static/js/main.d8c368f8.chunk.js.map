{"version":3,"sources":["components/Header.js","components/Footer.js","components/Form.js","components/Weather.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","Fragment","Navbar","dark","expand","className","NavbarBrand","href","Jumbotron","src","height","width","alt","Component","Footer","target","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","Home","state","undefined","e","a","preventDefault","elements","value","fetch","api_call","json","data","console","log","cod","setState","message","main","temp","sys","weather","this","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d8c368f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Navbar, NavbarBrand, Jumbotron } from 'reactstrap';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return(\r\n          <React.Fragment>\r\n            <Navbar dark expand=\"md\">\r\n              <div className=\"container\">\r\n                  <NavbarBrand className=\"mr-auto\" href=\"/\">\r\n                      <h4 className=\"text-center\">Weather Forecast</h4>\r\n                  </NavbarBrand>\r\n              </div>\r\n            </Navbar>\r\n            <Jumbotron>\r\n              <div className=\"container\">\r\n                <div className=\"row row-header\">\r\n                  <div className=\"col-12 col-sm-2\">\r\n                    <NavbarBrand className=\"mr\" href=\"/\">\r\n                      <img src=\"./images/1.png\" height=\"80\" width=\"80\"\r\n                          alt=\"0x0\" />\r\n                    </NavbarBrand>\r\n                  </div>\r\n                  <div className=\"col-12 col-sm-6\">\r\n                    <h1>Weather Forecast</h1>\r\n                    <p>Enter the city and country name in the below fields and hit the search button to get the current weather of particular location</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Jumbotron>\r\n          </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <div className=\"footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row \">             \r\n                    <div className=\"col-7 offset-1 col-sm-6 align-self-center\">\r\n                        <address>\r\n                        <h5 className=\"\">Sheshan Patel</h5>\r\n                        <i className=\"fa fa-phone fa-lg\"></i>: +647-540-2989<br />\r\n                        <i className=\"fa fa-envelope fa-lg\"></i>: <a href=\"patelsheshan0@gmail.com\">patelsheshan0@gmail.com</a>\r\n                        </address>\r\n                    </div>\r\n                    <div className=\"col-4 col-sm-5 align-self-center\">\r\n                        <div className=\"text-center\">\r\n                            <a className=\"btn btn-social-icon btn-linkedin\" href=\"https://www.linkedin.com/in/sheshanpatel23/\" target=\"_blank\"><i className=\"fa fa-linkedin\"></i></a>\r\n                            <a className=\"btn btn-social-icon btn-github\" href=\"https://github.com/sheshan23/React-Weather-Forecast\" target=\"_blank\"><i className=\"fa fa-github\"></i></a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">             \r\n                    <div className=\"col-auto col-md-auto\">\r\n                        <br/><p>Â© Copyright 2018 Weather Forecast Inc.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather}>\r\n\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n\t\t<button>Search</button>\r\n\t</form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\">\r\n\t {\t\r\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \r\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \r\n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \r\n\t \t\t<span className=\"weather__value\"> { props.description } </span>\r\n\t </p> \r\n\t }\r\n\t { \r\n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \r\n\t }\r\n\t</div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport Weather from \"./Weather\";\r\n\r\nconst API_KEY = \"fa341e59c446174bcdd587b58fcd7414\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    error: undefined\r\n  }\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    \r\n    const data = await api_call.json();\r\n    console.log(data);\r\n\r\n    if (city && country) {\r\n      if (data.cod == 404) {\r\n        this.setState({\r\n          temperature: undefined,\r\n          city: undefined,\r\n          country: undefined,\r\n          humidity: undefined,\r\n          description: undefined,\r\n          error: data.message\r\n        });\r\n      }\r\n      else {\r\n        this.setState({\r\n          temperature: data.main.temp,\r\n          city: data.name,\r\n          country: data.sys.country,\r\n          humidity: data.main.humidity,\r\n          description: data.weather[0].description,\r\n          error: \"\"\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: \"Please enter correct values.\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (  \r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12 form-container\">\r\n                    <Form getWeather={this.getWeather} />\r\n                    <Weather\r\n                      temperature={this.state.temperature}\r\n                      humidity={this.state.humidity}\r\n                      city={this.state.city}\r\n                      country={this.state.country}\r\n                      description={this.state.description}\r\n                      error={this.state.error}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div> \r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Home from './components/Home';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <div>\r\n          <Header />\r\n          <Home />\r\n          <Footer />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}